#!/bin/bash

# LLCLOSE Testing Guide
# =====================
# This script helps you test the llclose() implementation

echo "=================================="
echo "LLCLOSE() Testing Guide"
echo "=================================="
echo ""

echo "PREREQUISITES"
echo "-------------"
echo "1. Two connected serial ports (physical or virtual)"
echo "2. Compiled application programs for Tx and Rx"
echo ""

echo "SETUP ON LINUX/WSL"
echo "------------------"
echo "Create virtual serial ports with socat:"
echo "  socat -d -d pty,raw,echo=0 pty,raw,echo=0"
echo ""
echo "This creates two ports, example:"
echo "  /dev/pts/3 <-> /dev/pts/4"
echo ""

echo "COMPILATION"
echo "-----------"
echo "Compile your application:"
echo "  gcc -Wall -o tx_app application_tx.c src/link_layer.c src/serial_port.c"
echo "  gcc -Wall -o rx_app application_rx.c src/link_layer.c src/serial_port.c"
echo ""

echo "TEST SEQUENCE"
echo "-------------"
echo ""

echo "TEST 1: Normal Disconnect (Both sides cooperate)"
echo "================================================"
echo ""
echo "Terminal 1 (Receiver):"
echo "  ./rx_app /dev/pts/3"
echo ""
echo "Terminal 2 (Transmitter):"
echo "  ./tx_app /dev/pts/4"
echo ""
echo "Expected behavior:"
echo "  1. Both programs connect successfully (llopen)"
echo "  2. Perform data transfer (if implemented)"
echo "  3. Call llclose()"
echo "  4. Receiver waits for DISC from Tx"
echo "  5. Transmitter sends DISC"
echo "  6. Receiver responds with DISC"
echo "  7. Transmitter sends UA"
echo "  8. Receiver receives UA"
echo "  9. Both close serial ports successfully"
echo ""
echo "Success indicators:"
echo "  ✓ Both programs print: 'Connection closed successfully'"
echo "  ✓ No timeout messages"
echo "  ✓ Programs exit with code 0"
echo ""

echo "TEST 2: Timeout Test (Receiver not running)"
echo "==========================================="
echo ""
echo "Terminal 1:"
echo "  ./tx_app /dev/pts/4"
echo ""
echo "Expected behavior:"
echo "  1. Transmitter connects (may timeout if Rx not present)"
echo "  2. Transmitter sends DISC frames"
echo "  3. No response received (Receiver not running)"
echo "  4. Alarm triggers after timeout (3 seconds)"
echo "  5. Retransmission attempts (up to 3 times)"
echo "  6. After max retries, error returned"
echo ""
echo "Success indicators:"
echo "  ✓ See 'Alarm #1 received', 'Alarm #2 received', 'Alarm #3 received'"
echo "  ✓ See 'Timeout #X - retransmitting DISC frame...'"
echo "  ✓ See 'Failed to receive DISC response after 3 attempts'"
echo "  ✓ Program exits with error code"
echo ""

echo "TEST 3: Receiver Timeout (Tx sends DISC but not UA)"
echo "===================================================="
echo "This test requires modifying txDisconnect() to NOT send UA"
echo ""
echo "Expected behavior:"
echo "  1. Both programs connect"
echo "  2. Receiver receives DISC, sends DISC response"
echo "  3. Receiver waits for UA"
echo "  4. Timeout occurs (no UA received)"
echo "  5. Receiver closes with error"
echo ""

echo "DEBUGGING TIPS"
echo "=============="
echo ""
echo "1. Add verbose logging:"
echo "   - Print every byte sent/received"
echo "   - Print state transitions in state machines"
echo "   - Print when alarms trigger"
echo ""
echo "2. Use serial port monitor:"
echo "   - interceptty (Linux)"
echo "   - Monitor frame exchange in real-time"
echo ""
echo "3. Check frame contents:"
echo "   printf(\"Frame: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\\n\","
echo "          frame[0], frame[1], frame[2], frame[3], frame[4]);"
echo ""
echo "4. Verify BCC calculation:"
echo "   printf(\"BCC: A(0x%02X) XOR C(0x%02X) = 0x%02X\\n\", A, C, A^C);"
echo ""

echo "COMMON ERRORS & SOLUTIONS"
echo "========================="
echo ""
echo "Error: 'Timeout: Failed to receive DISC frame from Transmitter'"
echo "Solution:"
echo "  - Check that Transmitter is running"
echo "  - Verify serial ports are connected"
echo "  - Increase timeout value"
echo "  - Check Tx is actually sending DISC frame"
echo ""
echo "Error: 'Failed to receive DISC response after 3 attempts'"
echo "Solution:"
echo "  - Check that Receiver is running"
echo "  - Verify Receiver is in correct state"
echo "  - Check Receiver's DISC response frame format"
echo "  - Verify address field: should be 0x01 from Receiver"
echo ""
echo "Error: 'Timeout: Failed to receive UA frame from Transmitter'"
echo "Solution:"
echo "  - Verify Transmitter sends UA after receiving DISC"
echo "  - Check UA frame format (A=0x01, C=0x07)"
echo "  - Verify BCC calculation (should be 0x06)"
echo "  - Check state machine logic for UA reception"
echo ""
echo "Error: 'Error closing serial port'"
echo "Solution:"
echo "  - Serial port might already be closed"
echo "  - Check if port was opened successfully"
echo "  - Verify no other process is using the port"
echo ""

echo "EXPECTED OUTPUT EXAMPLES"
echo "========================"
echo ""
echo "Transmitter (Success):"
echo "  Serial port /dev/pts/4 opened"
echo "  Alarm configured"
echo "  SET frame sent..."
echo "  UA frame received!"
echo "  Transmitter: Sending DISC frame..."
echo "  DISC frame sent (5 bytes)"
echo "  DISC frame received!"
echo "  Transmitter: UA frame sent (5 bytes)"
echo "  Connection closed successfully"
echo ""
echo "Receiver (Success):"
echo "  Serial port /dev/pts/3 opened"
echo "  Waiting for SET frame..."
echo "  Byte received: 0x7E"
echo "  Byte received: 0x03"
echo "  ..."
echo "  Sent UA frame."
echo "  Receiver: Waiting for DISC frame..."
echo "  DISC frame received!"
echo "  Receiver: DISC frame sent (5 bytes)"
echo "  Receiver: Waiting for UA frame..."
echo "  Receiver: UA frame received!"
echo "  Connection closed successfully"
echo ""

echo "VERIFICATION CHECKLIST"
echo "======================"
echo ""
echo "[ ] llclose() returns 0 on success"
echo "[ ] llclose() returns -1 on error"
echo "[ ] Transmitter sends DISC with A=0x03, C=0x0B"
echo "[ ] Receiver sends DISC with A=0x01, C=0x0B"
echo "[ ] Transmitter sends UA with A=0x01, C=0x07"
echo "[ ] Retransmission works (Tx side)"
echo "[ ] Timeout works (both sides)"
echo "[ ] Serial port is closed in all cases"
echo "[ ] No memory leaks"
echo "[ ] No segmentation faults"
echo ""

echo "ADVANCED TESTING"
echo "================"
echo ""
echo "1. Frame corruption test:"
echo "   - Modify a byte in DISC frame"
echo "   - Verify state machine rejects it"
echo "   - Verify retransmission occurs"
echo ""
echo "2. Concurrent test:"
echo "   - Run multiple Tx-Rx pairs"
echo "   - Verify no interference"
echo ""
echo "3. Stress test:"
echo "   - Rapidly open and close connections"
echo "   - Verify cleanup is proper"
echo ""
echo "4. Performance test:"
echo "   - Measure disconnect time"
echo "   - Should be: (attempts * timeout) in worst case"
echo ""

echo ""
echo "=================================="
echo "Good luck with your testing!"
echo "=================================="
